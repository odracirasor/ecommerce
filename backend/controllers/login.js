import User from '../../models/User.js';

const login = async (req, res) => {
  console.log('‚û°Ô∏è Requisi√ß√£o recebida para login');
  console.log('üì• Body recebido:', req.body);

  const { email, password } = req.body;

  if (!email || !password) {
    console.warn('‚ö†Ô∏è Email ou senha n√£o fornecidos');
    return res.status(400).json({ error: "Email e senha s√£o obrigat√≥rios" });
  }

  try {
    const user = await User.findOne({ email });
    console.log('üîç Usu√°rio encontrado no banco:', user);

    if (!user) {
      console.warn('‚ö†Ô∏è Usu√°rio n√£o encontrado');
      return res.status(401).json({ error: "Usu√°rio n√£o encontrado" });
    }

    // Verifica√ß√£o de senha manual (sem bcrypt)
    const passwordMatch = password === user.password;
    console.log('üîê Senha v√°lida?', passwordMatch);

    if (!passwordMatch) {
      console.warn('‚ö†Ô∏è Senha incorreta');
      return res.status(401).json({ error: "Senha incorreta" });
    }

    if (!user.isVerified) {
      console.warn('‚ö†Ô∏è Usu√°rio ainda n√£o verificou o email');
      return res.status(403).json({ error: "Email ainda n√£o verificado" });
    }

    // Retorna os dados do usu√°rio (sem senha)
    const sanitizedUser = {
      _id: user._id,
      username: user.username,
      email: user.email,
      isAdmin: user.isAdmin || false,
      role: user.role || 'user',
    };

    console.log('‚úÖ Login bem-sucedido');
    res.json({ user: sanitizedUser });
  } catch (error) {
    console.error("‚ùå Erro ao fazer login:", error);
    res.status(500).json({ error: "Erro interno ao fazer login", details: error.message });
  }
};

export default login;
